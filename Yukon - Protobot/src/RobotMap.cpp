// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<DoubleSolenoid> RobotMap::gearloadergearloadsolenoid;
std::shared_ptr<DoubleSolenoid> RobotMap::gearpunchergearpunchsolenoid;
std::shared_ptr<SpeedController> RobotMap::drivetrainfrontleft;
std::shared_ptr<SpeedController> RobotMap::drivetrainrearleft;
std::shared_ptr<SpeedController> RobotMap::drivetrainfrontright;
std::shared_ptr<SpeedController> RobotMap::drivetrainrearright;
std::shared_ptr<SpeedController> RobotMap::climberropeclimber;
std::shared_ptr<RobotDrive> RobotMap::drivetraindrive;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    gearloadergearloadsolenoid.reset(new DoubleSolenoid(0, 0, 1));
    lw->AddActuator("gearloader", "gearloadsolenoid", gearloadergearloadsolenoid);
    
    gearpunchergearpunchsolenoid.reset(new DoubleSolenoid(0, 2, 3));
    lw->AddActuator("gearpuncher", "gearpunchsolenoid", gearpunchergearpunchsolenoid);
    
    drivetrainfrontleft.reset(new VictorSP(0));
    lw->AddActuator("drivetrain", "frontleft", std::static_pointer_cast<VictorSP>(drivetrainfrontleft));
    
    drivetrainrearleft.reset(new VictorSP(1));
    lw->AddActuator("drivetrain", "rearleft", std::static_pointer_cast<VictorSP>(drivetrainrearleft));
    
    drivetrainfrontright.reset(new VictorSP(2));
    lw->AddActuator("drivetrain", "frontright", std::static_pointer_cast<VictorSP>(drivetrainfrontright));
    
    drivetrainrearright.reset(new VictorSP(3));
    lw->AddActuator("drivetrain", "rearright", std::static_pointer_cast<VictorSP>(drivetrainrearright));
    
    climberropeclimber.reset(new TalonSRX(4));
    lw->AddActuator("climber", "ropeclimber", std::static_pointer_cast<TalonSRX>(climberropeclimber));
    

    drivetraindrive.reset(new RobotDrive(drivetrainfrontleft, drivetrainrearleft,
    drivetrainfrontright, drivetrainrearright));

    drivetraindrive->SetSafetyEnabled(true);
    drivetraindrive->SetExpiration(0.1);
    drivetraindrive->SetSensitivity(0.5);
    drivetraindrive->SetMaxOutput(1.0);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
