// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "CANTalon.h"


#include "Drivetrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "WPILib.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
#include "../Commands/drivewithjoystick.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Drivetrain::Drivetrain() : Subsystem("Drivetrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    fl = RobotMap::drivetrainfl;
    rl = RobotMap::drivetrainrl;
    fr = RobotMap::drivetrainfr;
    rr = RobotMap::drivetrainrr;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Drivetrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new drivewithjoystick());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Drivetrain::User_drive(std::shared_ptr<Joystick>xbox){
	fl->SetControlMode(CANTalon::kPercentVbus);
	fr->SetControlMode(CANTalon::kPercentVbus);

	fl->EnableControl();
	fr->EnableControl();

	fl->Set(-1*xbox->GetRawAxis(1));
	fr->Set(-1*xbox->GetRawAxis(5));
}
/*
void Drivetrain::User_drive(double leftax, double rightax){
	fl->SetControlMode(CANTalon::kPercentVbus);
	fr->SetControlMode(CANTalon::kPercentVbus);

	fl->EnableControl();
	fr->EnableControl();

	fl->Set(leftax);
	fr->Set(rightax);
}
*/
void Drivetrain::User_drivebackward(std::shared_ptr<Joystick>xbox){
	fl->SetControlMode(CANTalon::kPercentVbus);
	fr->SetControlMode(CANTalon::kPercentVbus);

	fl->EnableControl();
	fr->EnableControl();

	fl->Set(1*xbox->GetRawAxis(5));
	fr->Set(1*xbox->GetRawAxis(1));
}

void Drivetrain::User_driveslow(std::shared_ptr<Joystick>xbox){
	fl->SetControlMode(CANTalon::kPercentVbus);
	fr->SetControlMode(CANTalon::kPercentVbus);

	fl->ConfigMaxOutputVoltage(6.0);
	fr->ConfigMaxOutputVoltage(6.0);

	fl->EnableControl();
	fr->EnableControl();

	fl->Set(-1*xbox->GetRawAxis(1));
	fr->Set(-1*xbox->GetRawAxis(5));
}

void Drivetrain::encoder_position(double left, double right){
	fl->SetControlMode(CANTalon::kPosition);
	fr->SetControlMode(CANTalon::kPosition);

	fr->SetClosedLoopOutputDirection(true);

	fl->SetPosition(0.0);
	fr->SetPosition(0.0);

	fl->EnableControl();
	fr->EnableControl();

	fl->Set(left);
	fr->Set(right);

	l_pos = left;
	r_pos = right;
}

void Drivetrain::encoder_speed(double leftspeed, double rightspeed){
	fl->SetControlMode(CANTalon::kSpeed);
	fr->SetControlMode(CANTalon::kSpeed);

	fl->EnableControl();
	fr->EnableControl();

	fl->Set(leftspeed);
	fr->Set(rightspeed);
}

void Drivetrain::encoder_done(){
	fl->SetControlMode(CANTalon::kPercentVbus);
	fr->SetControlMode(CANTalon::kPercentVbus);

	fl->ConfigMaxOutputVoltage(12.0);
	fr->ConfigMaxOutputVoltage(12.0);

	fl->EnableControl();
	fr->EnableControl();

	fl->SetPosition(0.0);
	fr->SetPosition(0.0);

	fl->Set(0.0);
	fr->Set(0.0);

	l_pos = 0.0;
	r_pos = 0.0;
}

bool Drivetrain::ismove(){
	if((fl->GetPosition() < (l_pos+0.1) && fl->GetPosition() > (l_pos-0.1))
		&& fr->GetPosition() < (r_pos+0.1) && fr->GetPosition() > (r_pos - 0.1)){
		return true;
	}

	else{
		return false;
	}
}
