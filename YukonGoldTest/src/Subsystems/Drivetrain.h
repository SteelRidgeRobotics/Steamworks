// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class Drivetrain: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	double l_pos;
	double r_pos;
	int leftdistance;
	int rightdistance;
	double leftmotorOutput;
	double rightmotorOutput;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<CANTalon> frontleft;
	std::shared_ptr<CANTalon> frontright;
	std::shared_ptr<RobotDrive> robotDrive21;
	std::shared_ptr<CANTalon> rearleft;
	std::shared_ptr<CANTalon> rearright;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


public:
	Drivetrain();

	virtual ~Drivetrain();

	void InitHardware();

	void InitDefaultCommand();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	void TankDrive(std::shared_ptr<Joystick>xbox);

	void TankDrive(double left, double right);

	void driveauto();

	void drivestop();

	//void getleftdistance();

	//void getrightdistance();

	//void resetencoders();

	//void getaveragedistance();

	void Encoder(double left, double right, double leftspeed,
			double rightspeed);

	bool isMove();

	void EncoderDone();

	void EncoderReset();

	/*void EncoderReport(std::string LorR);

	void EncoderSpeed(std::string LorR); */

};

#endif
