// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "LiveWindow/LiveWindowSendable.h"
#include "ctrlib/CANTalon.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::drivetrainfrontleft;
std::shared_ptr<CANTalon> RobotMap::drivetrainrearleft;
std::shared_ptr<CANTalon> RobotMap::drivetrainfrontright;
std::shared_ptr<CANTalon> RobotMap::drivetrainrearright;
std::shared_ptr<RobotDrive> RobotMap::drivetrainRobotDrive41;
std::shared_ptr<DoubleSolenoid> RobotMap::gearcagegearcagesolenoid;
std::shared_ptr<SpeedController> RobotMap::climberropeclimber;
std::shared_ptr<DoubleSolenoid> RobotMap::gearpunchergearpunchsolenoid;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    drivetrainfrontleft.reset(new CANTalon(0));
    lw->AddActuator("Drivetrain", "frontleft", drivetrainfrontleft);
    
    drivetrainrearleft.reset(new CANTalon(1));
    lw->AddActuator("Drivetrain", "rearleft", drivetrainrearleft);
    
    drivetrainfrontright.reset(new CANTalon(2));
    lw->AddActuator("Drivetrain", "frontright", drivetrainfrontright);
    
    drivetrainrearright.reset(new CANTalon(3));
    lw->AddActuator("Drivetrain", "rearright", drivetrainrearright);
    
    drivetrainRobotDrive41.reset(new RobotDrive(drivetrainfrontleft, drivetrainrearleft,
              drivetrainfrontright, drivetrainrearright));
    
    drivetrainRobotDrive41->SetSafetyEnabled(true);
        drivetrainRobotDrive41->SetExpiration(0.1);
        drivetrainRobotDrive41->SetSensitivity(0.5);
        drivetrainRobotDrive41->SetMaxOutput(1.0);

    gearcagegearcagesolenoid.reset(new DoubleSolenoid(0, 0, 1));
    lw->AddActuator("Gearcage", "gearcagesolenoid", gearcagegearcagesolenoid);
    
    climberropeclimber.reset(new TalonSRX(4));
    lw->AddActuator("Climber", "ropeclimber", std::static_pointer_cast<TalonSRX>(climberropeclimber));
    
    gearpunchergearpunchsolenoid.reset(new DoubleSolenoid(0, 2, 3));
    lw->AddActuator("Gearpuncher", "gearpunchsolenoid", gearpunchergearpunchsolenoid);
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
